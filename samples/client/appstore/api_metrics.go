/*
App Store Connect API

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

API version: 3.1
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"bytes"
	"context"
	"io"
	"net/http"
	"net/url"
	"strings"
)


// MetricsAPIService MetricsAPI service
type MetricsAPIService service

type ApiAppsBetaTesterUsagesGetMetricsRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	limit *int32
	groupBy *[]string
	filterBetaTesters *string
	period *string
}

// maximum number of groups to return per page
func (r ApiAppsBetaTesterUsagesGetMetricsRequest) Limit(limit int32) ApiAppsBetaTesterUsagesGetMetricsRequest {
	r.limit = &limit
	return r
}

// the dimension by which to group the results
func (r ApiAppsBetaTesterUsagesGetMetricsRequest) GroupBy(groupBy []string) ApiAppsBetaTesterUsagesGetMetricsRequest {
	r.groupBy = &groupBy
	return r
}

// filter by &#39;betaTesters&#39; relationship dimension
func (r ApiAppsBetaTesterUsagesGetMetricsRequest) FilterBetaTesters(filterBetaTesters string) ApiAppsBetaTesterUsagesGetMetricsRequest {
	r.filterBetaTesters = &filterBetaTesters
	return r
}

// the duration of the reporting period
func (r ApiAppsBetaTesterUsagesGetMetricsRequest) Period(period string) ApiAppsBetaTesterUsagesGetMetricsRequest {
	r.period = &period
	return r
}

func (r ApiAppsBetaTesterUsagesGetMetricsRequest) Execute() (*AppsBetaTesterUsagesV1MetricResponse, *http.Response, error) {
	return r.ApiService.AppsBetaTesterUsagesGetMetricsExecute(r)
}

/*
AppsBetaTesterUsagesGetMetrics Method for AppsBetaTesterUsagesGetMetrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiAppsBetaTesterUsagesGetMetricsRequest
*/
func (a *MetricsAPIService) AppsBetaTesterUsagesGetMetrics(ctx context.Context, id string) ApiAppsBetaTesterUsagesGetMetricsRequest {
	return ApiAppsBetaTesterUsagesGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppsBetaTesterUsagesV1MetricResponse
func (a *MetricsAPIService) AppsBetaTesterUsagesGetMetricsExecute(r ApiAppsBetaTesterUsagesGetMetricsRequest) (*AppsBetaTesterUsagesV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppsBetaTesterUsagesV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.AppsBetaTesterUsagesGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/apps/{id}/metrics/betaTesterUsages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "csv")
	}
	if r.filterBetaTesters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[betaTesters]", r.filterBetaTesters, "")
	}
	if r.period != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "period", r.period, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBetaGroupsBetaTesterUsagesGetMetricsRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	limit *int32
	groupBy *[]string
	filterBetaTesters *string
	period *string
}

// maximum number of groups to return per page
func (r ApiBetaGroupsBetaTesterUsagesGetMetricsRequest) Limit(limit int32) ApiBetaGroupsBetaTesterUsagesGetMetricsRequest {
	r.limit = &limit
	return r
}

// the dimension by which to group the results
func (r ApiBetaGroupsBetaTesterUsagesGetMetricsRequest) GroupBy(groupBy []string) ApiBetaGroupsBetaTesterUsagesGetMetricsRequest {
	r.groupBy = &groupBy
	return r
}

// filter by &#39;betaTesters&#39; relationship dimension
func (r ApiBetaGroupsBetaTesterUsagesGetMetricsRequest) FilterBetaTesters(filterBetaTesters string) ApiBetaGroupsBetaTesterUsagesGetMetricsRequest {
	r.filterBetaTesters = &filterBetaTesters
	return r
}

// the duration of the reporting period
func (r ApiBetaGroupsBetaTesterUsagesGetMetricsRequest) Period(period string) ApiBetaGroupsBetaTesterUsagesGetMetricsRequest {
	r.period = &period
	return r
}

func (r ApiBetaGroupsBetaTesterUsagesGetMetricsRequest) Execute() (*AppsBetaTesterUsagesV1MetricResponse, *http.Response, error) {
	return r.ApiService.BetaGroupsBetaTesterUsagesGetMetricsExecute(r)
}

/*
BetaGroupsBetaTesterUsagesGetMetrics Method for BetaGroupsBetaTesterUsagesGetMetrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiBetaGroupsBetaTesterUsagesGetMetricsRequest
*/
func (a *MetricsAPIService) BetaGroupsBetaTesterUsagesGetMetrics(ctx context.Context, id string) ApiBetaGroupsBetaTesterUsagesGetMetricsRequest {
	return ApiBetaGroupsBetaTesterUsagesGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return AppsBetaTesterUsagesV1MetricResponse
func (a *MetricsAPIService) BetaGroupsBetaTesterUsagesGetMetricsExecute(r ApiBetaGroupsBetaTesterUsagesGetMetricsRequest) (*AppsBetaTesterUsagesV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *AppsBetaTesterUsagesV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.BetaGroupsBetaTesterUsagesGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/betaGroups/{id}/metrics/betaTesterUsages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "csv")
	}
	if r.filterBetaTesters != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[betaTesters]", r.filterBetaTesters, "")
	}
	if r.period != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "period", r.period, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBetaTestersBetaTesterUsagesGetMetricsRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	limit *int32
	filterApps *string
	period *string
}

// maximum number of groups to return per page
func (r ApiBetaTestersBetaTesterUsagesGetMetricsRequest) Limit(limit int32) ApiBetaTestersBetaTesterUsagesGetMetricsRequest {
	r.limit = &limit
	return r
}

// filter by &#39;apps&#39; relationship dimension
func (r ApiBetaTestersBetaTesterUsagesGetMetricsRequest) FilterApps(filterApps string) ApiBetaTestersBetaTesterUsagesGetMetricsRequest {
	r.filterApps = &filterApps
	return r
}

// the duration of the reporting period
func (r ApiBetaTestersBetaTesterUsagesGetMetricsRequest) Period(period string) ApiBetaTestersBetaTesterUsagesGetMetricsRequest {
	r.period = &period
	return r
}

func (r ApiBetaTestersBetaTesterUsagesGetMetricsRequest) Execute() (*BetaTesterUsagesV1MetricResponse, *http.Response, error) {
	return r.ApiService.BetaTestersBetaTesterUsagesGetMetricsExecute(r)
}

/*
BetaTestersBetaTesterUsagesGetMetrics Method for BetaTestersBetaTesterUsagesGetMetrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiBetaTestersBetaTesterUsagesGetMetricsRequest
*/
func (a *MetricsAPIService) BetaTestersBetaTesterUsagesGetMetrics(ctx context.Context, id string) ApiBetaTestersBetaTesterUsagesGetMetricsRequest {
	return ApiBetaTestersBetaTesterUsagesGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BetaTesterUsagesV1MetricResponse
func (a *MetricsAPIService) BetaTestersBetaTesterUsagesGetMetricsExecute(r ApiBetaTestersBetaTesterUsagesGetMetricsRequest) (*BetaTesterUsagesV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BetaTesterUsagesV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.BetaTestersBetaTesterUsagesGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/betaTesters/{id}/metrics/betaTesterUsages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	if r.filterApps != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[apps]", r.filterApps, "")
	}
	if r.period != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "period", r.period, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiBuildsBetaBuildUsagesGetMetricsRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	limit *int32
}

// maximum number of groups to return per page
func (r ApiBuildsBetaBuildUsagesGetMetricsRequest) Limit(limit int32) ApiBuildsBetaBuildUsagesGetMetricsRequest {
	r.limit = &limit
	return r
}

func (r ApiBuildsBetaBuildUsagesGetMetricsRequest) Execute() (*BetaBuildUsagesV1MetricResponse, *http.Response, error) {
	return r.ApiService.BuildsBetaBuildUsagesGetMetricsExecute(r)
}

/*
BuildsBetaBuildUsagesGetMetrics Method for BuildsBetaBuildUsagesGetMetrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiBuildsBetaBuildUsagesGetMetricsRequest
*/
func (a *MetricsAPIService) BuildsBetaBuildUsagesGetMetrics(ctx context.Context, id string) ApiBuildsBetaBuildUsagesGetMetricsRequest {
	return ApiBuildsBetaBuildUsagesGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return BetaBuildUsagesV1MetricResponse
func (a *MetricsAPIService) BuildsBetaBuildUsagesGetMetricsExecute(r ApiBuildsBetaBuildUsagesGetMetricsRequest) (*BetaBuildUsagesV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *BetaBuildUsagesV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.BuildsBetaBuildUsagesGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/builds/{id}/metrics/betaBuildUsages"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterDetailsClassicMatchmakingRequestsGetMetricsRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	granularity *[]string
	limit *int32
	groupBy *[]string
	filterResult *string
	sort *[]string
}

// the granularity of the per-group dataset
func (r ApiGameCenterDetailsClassicMatchmakingRequestsGetMetricsRequest) Granularity(granularity []string) ApiGameCenterDetailsClassicMatchmakingRequestsGetMetricsRequest {
	r.granularity = &granularity
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterDetailsClassicMatchmakingRequestsGetMetricsRequest) Limit(limit int32) ApiGameCenterDetailsClassicMatchmakingRequestsGetMetricsRequest {
	r.limit = &limit
	return r
}

// the dimension by which to group the results
func (r ApiGameCenterDetailsClassicMatchmakingRequestsGetMetricsRequest) GroupBy(groupBy []string) ApiGameCenterDetailsClassicMatchmakingRequestsGetMetricsRequest {
	r.groupBy = &groupBy
	return r
}

// filter by &#39;result&#39; attribute dimension
func (r ApiGameCenterDetailsClassicMatchmakingRequestsGetMetricsRequest) FilterResult(filterResult string) ApiGameCenterDetailsClassicMatchmakingRequestsGetMetricsRequest {
	r.filterResult = &filterResult
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterDetailsClassicMatchmakingRequestsGetMetricsRequest) Sort(sort []string) ApiGameCenterDetailsClassicMatchmakingRequestsGetMetricsRequest {
	r.sort = &sort
	return r
}

func (r ApiGameCenterDetailsClassicMatchmakingRequestsGetMetricsRequest) Execute() (*GameCenterMatchmakingAppRequestsV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterDetailsClassicMatchmakingRequestsGetMetricsExecute(r)
}

/*
GameCenterDetailsClassicMatchmakingRequestsGetMetrics Method for GameCenterDetailsClassicMatchmakingRequestsGetMetrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterDetailsClassicMatchmakingRequestsGetMetricsRequest
*/
func (a *MetricsAPIService) GameCenterDetailsClassicMatchmakingRequestsGetMetrics(ctx context.Context, id string) ApiGameCenterDetailsClassicMatchmakingRequestsGetMetricsRequest {
	return ApiGameCenterDetailsClassicMatchmakingRequestsGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingAppRequestsV1MetricResponse
func (a *MetricsAPIService) GameCenterDetailsClassicMatchmakingRequestsGetMetricsExecute(r ApiGameCenterDetailsClassicMatchmakingRequestsGetMetricsRequest) (*GameCenterMatchmakingAppRequestsV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingAppRequestsV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.GameCenterDetailsClassicMatchmakingRequestsGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterDetails/{id}/metrics/classicMatchmakingRequests"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "csv")
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "csv")
	}
	if r.filterResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[result]", r.filterResult, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	granularity *[]string
	limit *int32
	groupBy *[]string
	filterResult *string
	sort *[]string
}

// the granularity of the per-group dataset
func (r ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRequest) Granularity(granularity []string) ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRequest {
	r.granularity = &granularity
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRequest) Limit(limit int32) ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRequest {
	r.limit = &limit
	return r
}

// the dimension by which to group the results
func (r ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRequest) GroupBy(groupBy []string) ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRequest {
	r.groupBy = &groupBy
	return r
}

// filter by &#39;result&#39; attribute dimension
func (r ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRequest) FilterResult(filterResult string) ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRequest {
	r.filterResult = &filterResult
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRequest) Sort(sort []string) ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRequest {
	r.sort = &sort
	return r
}

func (r ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRequest) Execute() (*GameCenterMatchmakingAppRequestsV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsExecute(r)
}

/*
GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics Method for GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRequest
*/
func (a *MetricsAPIService) GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics(ctx context.Context, id string) ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRequest {
	return ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingAppRequestsV1MetricResponse
func (a *MetricsAPIService) GameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsExecute(r ApiGameCenterDetailsRuleBasedMatchmakingRequestsGetMetricsRequest) (*GameCenterMatchmakingAppRequestsV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingAppRequestsV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.GameCenterDetailsRuleBasedMatchmakingRequestsGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterDetails/{id}/metrics/ruleBasedMatchmakingRequests"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "csv")
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "csv")
	}
	if r.filterResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[result]", r.filterResult, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	granularity *[]string
	limit *int32
	sort *[]string
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest) Granularity(granularity []string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest {
	r.granularity = &granularity
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest) Limit(limit int32) ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest {
	r.limit = &limit
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest) Sort(sort []string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest {
	r.sort = &sort
	return r
}

func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest) Execute() (*GameCenterMatchmakingQueueSizesV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsExecute(r)
}

/*
GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics Method for GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest
*/
func (a *MetricsAPIService) GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest {
	return ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingQueueSizesV1MetricResponse
func (a *MetricsAPIService) GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsExecute(r ApiGameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetricsRequest) (*GameCenterMatchmakingQueueSizesV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingQueueSizesV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.GameCenterMatchmakingQueuesExperimentMatchmakingQueueSizesGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingQueueSizes"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "csv")
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	granularity *[]string
	limit *int32
	groupBy *[]string
	filterResult *string
	filterGameCenterDetail *string
	sort *[]string
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest) Granularity(granularity []string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest {
	r.granularity = &granularity
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest) Limit(limit int32) ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest {
	r.limit = &limit
	return r
}

// the dimension by which to group the results
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest) GroupBy(groupBy []string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest {
	r.groupBy = &groupBy
	return r
}

// filter by &#39;result&#39; attribute dimension
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest) FilterResult(filterResult string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest {
	r.filterResult = &filterResult
	return r
}

// filter by &#39;gameCenterDetail&#39; relationship dimension
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest) FilterGameCenterDetail(filterGameCenterDetail string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest {
	r.filterGameCenterDetail = &filterGameCenterDetail
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest) Sort(sort []string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest {
	r.sort = &sort
	return r
}

func (r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest) Execute() (*GameCenterMatchmakingQueueRequestsV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsExecute(r)
}

/*
GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics Method for GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest
*/
func (a *MetricsAPIService) GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest {
	return ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingQueueRequestsV1MetricResponse
func (a *MetricsAPIService) GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsExecute(r ApiGameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetricsRequest) (*GameCenterMatchmakingQueueRequestsV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingQueueRequestsV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.GameCenterMatchmakingQueuesExperimentMatchmakingRequestsGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingQueues/{id}/metrics/experimentMatchmakingRequests"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "csv")
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "csv")
	}
	if r.filterResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[result]", r.filterResult, "")
	}
	if r.filterGameCenterDetail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterDetail]", r.filterGameCenterDetail, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	granularity *[]string
	limit *int32
	sort *[]string
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest) Granularity(granularity []string) ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest {
	r.granularity = &granularity
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest) Limit(limit int32) ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest {
	r.limit = &limit
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest) Sort(sort []string) ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest {
	r.sort = &sort
	return r
}

func (r ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest) Execute() (*GameCenterMatchmakingQueueSizesV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsExecute(r)
}

/*
GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics Method for GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest
*/
func (a *MetricsAPIService) GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest {
	return ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingQueueSizesV1MetricResponse
func (a *MetricsAPIService) GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsExecute(r ApiGameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetricsRequest) (*GameCenterMatchmakingQueueSizesV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingQueueSizesV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.GameCenterMatchmakingQueuesMatchmakingQueueSizesGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingQueueSizes"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "csv")
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	granularity *[]string
	limit *int32
	groupBy *[]string
	filterResult *string
	filterGameCenterDetail *string
	sort *[]string
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest) Granularity(granularity []string) ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest {
	r.granularity = &granularity
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest) Limit(limit int32) ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest {
	r.limit = &limit
	return r
}

// the dimension by which to group the results
func (r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest) GroupBy(groupBy []string) ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest {
	r.groupBy = &groupBy
	return r
}

// filter by &#39;result&#39; attribute dimension
func (r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest) FilterResult(filterResult string) ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest {
	r.filterResult = &filterResult
	return r
}

// filter by &#39;gameCenterDetail&#39; relationship dimension
func (r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest) FilterGameCenterDetail(filterGameCenterDetail string) ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest {
	r.filterGameCenterDetail = &filterGameCenterDetail
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest) Sort(sort []string) ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest {
	r.sort = &sort
	return r
}

func (r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest) Execute() (*GameCenterMatchmakingQueueRequestsV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsExecute(r)
}

/*
GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics Method for GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest
*/
func (a *MetricsAPIService) GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest {
	return ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingQueueRequestsV1MetricResponse
func (a *MetricsAPIService) GameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsExecute(r ApiGameCenterMatchmakingQueuesMatchmakingRequestsGetMetricsRequest) (*GameCenterMatchmakingQueueRequestsV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingQueueRequestsV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.GameCenterMatchmakingQueuesMatchmakingRequestsGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingRequests"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "csv")
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "csv")
	}
	if r.filterResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[result]", r.filterResult, "")
	}
	if r.filterGameCenterDetail != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterDetail]", r.filterGameCenterDetail, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	granularity *[]string
	limit *int32
	sort *[]string
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest) Granularity(granularity []string) ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest {
	r.granularity = &granularity
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest) Limit(limit int32) ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest {
	r.limit = &limit
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest) Sort(sort []string) ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest {
	r.sort = &sort
	return r
}

func (r ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest) Execute() (*GameCenterMatchmakingSessionsV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsExecute(r)
}

/*
GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics Method for GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest
*/
func (a *MetricsAPIService) GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest {
	return ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingSessionsV1MetricResponse
func (a *MetricsAPIService) GameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsExecute(r ApiGameCenterMatchmakingQueuesMatchmakingSessionsGetMetricsRequest) (*GameCenterMatchmakingSessionsV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingSessionsV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.GameCenterMatchmakingQueuesMatchmakingSessionsGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingQueues/{id}/metrics/matchmakingSessions"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "csv")
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	granularity *[]string
	limit *int32
	groupBy *[]string
	filterResult *string
	filterGameCenterMatchmakingQueue *string
	sort *[]string
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest) Granularity(granularity []string) ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest {
	r.granularity = &granularity
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest) Limit(limit int32) ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest {
	r.limit = &limit
	return r
}

// the dimension by which to group the results
func (r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest) GroupBy(groupBy []string) ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest {
	r.groupBy = &groupBy
	return r
}

// filter by &#39;result&#39; attribute dimension
func (r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest) FilterResult(filterResult string) ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest {
	r.filterResult = &filterResult
	return r
}

// filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension
func (r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest) FilterGameCenterMatchmakingQueue(filterGameCenterMatchmakingQueue string) ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest {
	r.filterGameCenterMatchmakingQueue = &filterGameCenterMatchmakingQueue
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest) Sort(sort []string) ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest {
	r.sort = &sort
	return r
}

func (r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest) Execute() (*GameCenterMatchmakingBooleanRuleResultsV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsExecute(r)
}

/*
GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics Method for GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest
*/
func (a *MetricsAPIService) GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest {
	return ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingBooleanRuleResultsV1MetricResponse
func (a *MetricsAPIService) GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsExecute(r ApiGameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetricsRequest) (*GameCenterMatchmakingBooleanRuleResultsV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingBooleanRuleResultsV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.GameCenterMatchmakingRulesMatchmakingBooleanRuleResultsGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingBooleanRuleResults"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "csv")
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "csv")
	}
	if r.filterResult != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[result]", r.filterResult, "")
	}
	if r.filterGameCenterMatchmakingQueue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterMatchmakingQueue]", r.filterGameCenterMatchmakingQueue, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	granularity *[]string
	limit *int32
	groupBy *[]string
	filterGameCenterMatchmakingQueue *string
	sort *[]string
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest) Granularity(granularity []string) ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest {
	r.granularity = &granularity
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest) Limit(limit int32) ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest {
	r.limit = &limit
	return r
}

// the dimension by which to group the results
func (r ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest) GroupBy(groupBy []string) ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest {
	r.groupBy = &groupBy
	return r
}

// filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension
func (r ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest) FilterGameCenterMatchmakingQueue(filterGameCenterMatchmakingQueue string) ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest {
	r.filterGameCenterMatchmakingQueue = &filterGameCenterMatchmakingQueue
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest) Sort(sort []string) ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest {
	r.sort = &sort
	return r
}

func (r ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest) Execute() (*GameCenterMatchmakingNumberRuleResultsV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsExecute(r)
}

/*
GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics Method for GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest
*/
func (a *MetricsAPIService) GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest {
	return ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingNumberRuleResultsV1MetricResponse
func (a *MetricsAPIService) GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsExecute(r ApiGameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetricsRequest) (*GameCenterMatchmakingNumberRuleResultsV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingNumberRuleResultsV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.GameCenterMatchmakingRulesMatchmakingNumberRuleResultsGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingNumberRuleResults"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "csv")
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "csv")
	}
	if r.filterGameCenterMatchmakingQueue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterMatchmakingQueue]", r.filterGameCenterMatchmakingQueue, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}

type ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest struct {
	ctx context.Context
	ApiService *MetricsAPIService
	id string
	granularity *[]string
	limit *int32
	groupBy *[]string
	filterGameCenterMatchmakingQueue *string
	sort *[]string
}

// the granularity of the per-group dataset
func (r ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest) Granularity(granularity []string) ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest {
	r.granularity = &granularity
	return r
}

// maximum number of groups to return per page
func (r ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest) Limit(limit int32) ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest {
	r.limit = &limit
	return r
}

// the dimension by which to group the results
func (r ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest) GroupBy(groupBy []string) ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest {
	r.groupBy = &groupBy
	return r
}

// filter by &#39;gameCenterMatchmakingQueue&#39; relationship dimension
func (r ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest) FilterGameCenterMatchmakingQueue(filterGameCenterMatchmakingQueue string) ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest {
	r.filterGameCenterMatchmakingQueue = &filterGameCenterMatchmakingQueue
	return r
}

// comma-separated list of sort expressions; metrics will be sorted as specified
func (r ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest) Sort(sort []string) ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest {
	r.sort = &sort
	return r
}

func (r ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest) Execute() (*GameCenterMatchmakingRuleErrorsV1MetricResponse, *http.Response, error) {
	return r.ApiService.GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsExecute(r)
}

/*
GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics Method for GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics

 @param ctx context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 @param id the id of the requested resource
 @return ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest
*/
func (a *MetricsAPIService) GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics(ctx context.Context, id string) ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest {
	return ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

// Execute executes the request
//  @return GameCenterMatchmakingRuleErrorsV1MetricResponse
func (a *MetricsAPIService) GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsExecute(r ApiGameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetricsRequest) (*GameCenterMatchmakingRuleErrorsV1MetricResponse, *http.Response, error) {
	var (
		localVarHTTPMethod   = http.MethodGet
		localVarPostBody     interface{}
		formFiles            []formFile
		localVarReturnValue  *GameCenterMatchmakingRuleErrorsV1MetricResponse
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "MetricsAPIService.GameCenterMatchmakingRulesMatchmakingRuleErrorsGetMetrics")
	if err != nil {
		return localVarReturnValue, nil, &GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/v1/gameCenterMatchmakingRules/{id}/metrics/matchmakingRuleErrors"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", url.PathEscape(parameterValueToString(r.id, "id")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := url.Values{}
	localVarFormParams := url.Values{}
	if r.granularity == nil {
		return localVarReturnValue, nil, reportError("granularity is required and must be specified")
	}

	if r.limit != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "limit", r.limit, "")
	}
	parameterAddToHeaderOrQuery(localVarQueryParams, "granularity", r.granularity, "csv")
	if r.groupBy != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "groupBy", r.groupBy, "csv")
	}
	if r.filterGameCenterMatchmakingQueue != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "filter[gameCenterMatchmakingQueue]", r.filterGameCenterMatchmakingQueue, "")
	}
	if r.sort != nil {
		parameterAddToHeaderOrQuery(localVarQueryParams, "sort", r.sort, "csv")
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, formFiles)
	if err != nil {
		return localVarReturnValue, nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	localVarBody, err := io.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	localVarHTTPResponse.Body = io.NopCloser(bytes.NewBuffer(localVarBody))
	if err != nil {
		return localVarReturnValue, localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		if localVarHTTPResponse.StatusCode == 400 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 403 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		if localVarHTTPResponse.StatusCode == 404 {
			var v ErrorResponse
			err = a.client.decode(&v, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
			if err != nil {
				newErr.error = err.Error()
				return localVarReturnValue, localVarHTTPResponse, newErr
			}
					newErr.error = formatErrorMessage(localVarHTTPResponse.Status, &v)
					newErr.model = v
			return localVarReturnValue, localVarHTTPResponse, newErr
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	err = a.client.decode(&localVarReturnValue, localVarBody, localVarHTTPResponse.Header.Get("Content-Type"))
	if err != nil {
		newErr := &GenericOpenAPIError{
			body:  localVarBody,
			error: err.Error(),
		}
		return localVarReturnValue, localVarHTTPResponse, newErr
	}

	return localVarReturnValue, localVarHTTPResponse, nil
}
